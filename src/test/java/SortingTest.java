import static org.husonlab.diamer2.indexing.Sorting.radixSort44bits;
import org.junit.Test;

import static org.junit.Assert.*;

public class SortingTest {
    @Test
    public void testRadixSort44bits() {
        long[] input = new long[]{
                //1111111111111111111111111111111111111111110000000000000000000000
                0b0000000000010000000000000000000000000000010100000000000000000000L,
                0b0000000000001000000000000000000000000000010100000000000000000000L,
                0b0000000000000000000000000001000100000001000100000000000000000000L,
                0b1100000000000000000000000001000100000001000100000000000000000000L,
                0b1100000000000000000000000001000100000001001100000000000000000000L,
                0b1100000000000000000000000001000100000001000100000000000000000000L,
                0b1000000000000000000000000001000100000001000100000000000000000000L,
                0b0000000000000000000000000000000000011100000100000000000000000000L,
                0b0000000000000000000000000000000000000000001100000000000000000000L,
                0b0000000000000000000000000000000000000000001011111111111011111111L,
                0b0000000000000000000000000000000000000000001010000000000000000000L,
                0b0000000000000000000000000000000000000000000111111000111111111101L,
                0b0000000000000000000000000000000000000000000100011111111110001111L,
                0b0000000000000000000000000000000000000000000100000011111111101111L,
                0b0000000000000000000000000000000000000000000000000000000000000000L,
                0b0000000000000000000000000000000000000000000100000000000000001111L,
                0b0000000000000000000000000000000000000000000000000000000000000000L,
        };
        long[] expected = new long[]{
                0b0000000000000000000000000000000000000000000000000000000000000000L,
                0b0000000000000000000000000000000000000000000000000000000000000000L,
                0b0000000000000000000000000000000000000000000111111000111111111101L,
                0b0000000000000000000000000000000000000000000100011111111110001111L,
                0b0000000000000000000000000000000000000000000100000011111111101111L,
                0b0000000000000000000000000000000000000000000100000000000000001111L,
                0b0000000000000000000000000000000000000000001011111111111011111111L,
                0b0000000000000000000000000000000000000000001010000000000000000000L,
                0b0000000000000000000000000000000000000000001100000000000000000000L,
                0b0000000000000000000000000000000000011100000100000000000000000000L,
                0b0000000000000000000000000001000100000001000100000000000000000000L,
                0b0000000000001000000000000000000000000000010100000000000000000000L,
                0b0000000000010000000000000000000000000000010100000000000000000000L,
                0b1000000000000000000000000001000100000001000100000000000000000000L,
                0b1100000000000000000000000001000100000001000100000000000000000000L,
                0b1100000000000000000000000001000100000001000100000000000000000000L,
                0b1100000000000000000000000001000100000001001100000000000000000000L,
        };
        for (long l : radixSort44bits(input)) {
            System.out.println(Long.toBinaryString(l));
        }
        assertArrayEquals(expected, radixSort44bits(input));
    }
}
